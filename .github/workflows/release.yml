name: Generate Release Notes and Bump Version

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        run: cd frontend && npm install

      - name: Install git-chglog
        run: |
          wget https://github.com/git-chglog/git-chglog/releases/download/v0.15.1/git-chglog_0.15.1_linux_amd64.tar.gz
          tar -xzf git-chglog_0.15.1_linux_amd64.tar.gz
          sudo mv git-chglog /usr/local/bin/

      - name: Ensure a git tag exists
        id: ensure_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          IFS='.' read -r -a tag_parts <<< "${latest_tag#v}"
          tag_parts[2]=$((tag_parts[2] + 1))
          new_tag="v${tag_parts[0]}.${tag_parts[1]}.${tag_parts[2]}"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create and push new tag
        run: |
          echo "New tag: ${{ env.new_tag }}"
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.new_tag }}"; then
            echo "Tag ${{ env.new_tag }} already exists. Skipping tag creation."
          else
            echo "Creating and pushing new tag ${{ env.new_tag }}"
            git tag ${{ env.new_tag }}
            git push origin ${{ env.new_tag }}
          fi

      - name: List all tags
        run: git tag

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest commit message
        id: get_commit_message
        run: |
          latest_commit_message=$(git log -1 --pretty=%B)
          echo "Latest commit message: $latest_commit_message"
          echo "commit_message=$latest_commit_message" >> $GITHUB_ENV

      - name: Upload commit message artifact
        uses: actions/upload-artifact@v3
        with:
          name: commit-message
          path: commit_message.txt
        run: echo "${{ env.commit_message }}" > commit_message.txt

      - name: Check if release exists
        id: check_release
        run: |
          release_exists=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.new_tag }}" | jq '.id')
          if [ "$release_exists" != "null" ]; then
            echo "Release with tag ${{ env.new_tag }} already exists. Skipping release creation."
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "release_exists=false" >> $GITHUB_ENV
          fi

      - name: Create Release
        if: env.release_exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          body: ${{ env.commit_message }}
          draft: false
          prerelease: false

      - name: Update Release
        if: env.release_exists == 'true'
        run: |
          release_id=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.new_tag }}" | jq '.id')
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\":\"${{ env.commit_message }}\"}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
